package sk.itsovy.petrova.ProjectRegEx;

import sk.itsovy.data.DataIP;
import sk.itsovy.data.Date;
import sk.itsovy.data.MacAddress;
import sk.itsovy.data.PersonalID;

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {

        public static void findIPAddress() {
            DataIP input = new DataIP();
            List l = input.get();
            System.out.println(l);
            Pattern p1 = Pattern.compile("((2[0-5][0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(2[0-5][0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])[$0-9]");
            for (int i = 0; i < l.size(); i++) {
                if (l.get(i) != null) {
                    Matcher m1 = p1.matcher((CharSequence) l.get(i));
                    while (m1.find()) {
                        System.out.println("IP Addresses: " + m1.group());
                    }
                }
            }
            System.out.println();
        }

            public static void findBirthID () {
                PersonalID input = new PersonalID();
                List l = input.get();
                System.out.println(l);
                Pattern p2 = Pattern.compile("^[0-9]{2}[0156][0-9]{3}\\/?[0-9]{3,4}$");
                for (int i = 0; i < l.size(); i++) {
                    if (l.get(i) != null) {
                        Matcher m2 = p2.matcher((CharSequence) l.get(i));
                        while (m2.find()) {
                            System.out.println("BirthID: " + m2.group());
                        }
                    }
                }
                System.out.println();
            }

            public static void findDate () {
                Date input = new Date();
                List l = input.get();
                Pattern p3 = Pattern.compile("^((([1-9]|([1-2][0-9]|31|30))\\.(1|3|5|7|9|11))|(([1-9]|([1-2][0-9]))\\.(2|4|6|8|10|12)))\\.((19|20)([0-9]{2}))$");
                for (int i = 0; i < l.size(); i++) {
                    if (l.get(i) != null) {
                        Matcher m3 = p3.matcher((CharSequence) l.get(i));
                        while (m3.find()) {
                            System.out.println("Dates:" + m3.group());
                        }
                    }
                }
                System.out.println();
            }

            public static void findMacAddress () {
                MacAddress input = new MacAddress();
                List l = input.get();
                System.out.println(l);
                Pattern p4 = Pattern.compile("^([0-9A-Fa-z]{2}[:-]){5}([0-9A-Fa-z]{2})$");
                for (int i = 0; i < l.size(); i++) {
                    if (l.get(i) != null) {
                        Matcher m4 = p4.matcher((CharSequence) l.get(i));
                        while (m4.find()) {
                            System.out.println("MacAddress: " + m4.group());
                        }
                    }
                }
                System.out.println();
            }



    public static void main(String[] args) {
        Main.findIPAddress();
        Main.findBirthID();
        Main.findDate();
        Main.findMacAddress();
    }
}



